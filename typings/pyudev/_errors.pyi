"""
This type stub file was generated by pyright.
"""

import abc

"""
    pyudev.device._errors
    =====================

    Errors raised by Device methods.

    .. moduleauthor:: Sebastian Wiesner <lunaryorn@gmail.com>
"""
class DeviceError(Exception):
    """
    Any error raised when messing around w/ or trying to discover devices.
    """
    __metaclass__ = abc.ABCMeta


class DeviceNotFoundError(DeviceError):
    """
    An exception indicating that no :class:`Device` was found.

    .. versionchanged:: 0.5
       Rename from ``NoSuchDeviceError`` to its current name.
    """
    __metaclass__ = abc.ABCMeta


class DeviceNotFoundAtPathError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating that no :class:`Device` was
    found at a given path.
    """
    def __init__(self, sys_path) -> None:
        ...
    
    @property
    def sys_path(self): # -> Any:
        """
        The path that caused this error as string.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class DeviceNotFoundByFileError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating that no :class:`Device` was
    found from the given filename.
    """
    ...


class DeviceNotFoundByInterfaceIndexError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating that no :class:`Device` was found
    from the given interface index.
    """
    ...


class DeviceNotFoundByKernelDeviceError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating that no :class:`Device` was found
    from the given kernel device string.

    The format of the kernel device string is defined in the
    systemd.journal-fields man pages.
    """
    ...


class DeviceNotFoundByNameError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating that no :class:`Device` was
    found with a given name.
    """
    def __init__(self, subsystem, sys_name) -> None:
        ...
    
    @property
    def subsystem(self): # -> Any:
        """
        The subsystem that caused this error as string.
        """
        ...
    
    @property
    def sys_name(self): # -> Any:
        """
        The sys name that caused this error as string.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class DeviceNotFoundByNumberError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating, that no :class:`Device` was found
    for a given device number.
    """
    def __init__(self, typ, number) -> None:
        ...
    
    @property
    def device_type(self): # -> Any:
        """
        The device type causing this error as string.  Either ``'char'`` or
        ``'block'``.
        """
        ...
    
    @property
    def device_number(self): # -> Any:
        """
        The device number causing this error as integer.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class DeviceNotFoundInEnvironmentError(DeviceNotFoundError):
    """
    A :exc:`DeviceNotFoundError` indicating, that no :class:`Device` could
    be constructed from the process environment.
    """
    def __str__(self) -> str:
        ...
    


class DeviceValueError(DeviceError):
    """
    Raised when a parameter has an unacceptable value.

    May also be raised when the parameter has an unacceptable type.
    """
    _FMT_STR = ...
    def __init__(self, value, param, msg=...) -> None:
        """
        Initializer.

        :param object value: the value
        :param str param: the parameter
        :param str msg: an explanatory message
        """
        ...
    
    def __str__(self) -> str:
        ...
    


