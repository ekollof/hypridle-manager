"""
This type stub file was generated by pyright.
"""

import abc

"""
    pyudev.discover
    ===============

    Tools to discover a device given limited information.

    .. moduleauthor::  mulhern <amulhern@redhat.com>
"""
def wrap_exception(func): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | None]:
    """
    Allow Device discovery methods to return None instead of raising an
    exception.
    """
    ...

class Hypothesis:
    """
    Represents a hypothesis about the meaning of the device identifier.
    """
    __metaclass__ = abc.ABCMeta
    @classmethod
    @abc.abstractmethod
    def match(cls, value):
        """
        Match the given string according to the hypothesis.

        The purpose of this method is to obtain a value corresponding to
        ``value`` if that is possible. It may use a regular expression, but
        in general it should just return ``value`` and let the lookup method
        sort out the rest.

        :param str value: the string to inspect
        :returns: the matched thing or None if unmatched
        :rtype: the type of lookup's key parameter or NoneType
        """
        ...
    
    @classmethod
    @abc.abstractmethod
    def lookup(cls, context, key):
        """
        Lookup the given string according to the hypothesis.

        :param Context context: the pyudev context
        :param key: a key with which to lookup the device
        :type key: the type of match's return value if not None
        :returns: a list of Devices obtained
        :rtype: frozenset of :class:`Device`
        """
        ...
    
    @classmethod
    def setup(cls, context): # -> None:
        """
        A potentially expensive method that may allow an :class:`Hypothesis`
        to find devices more rapidly or to find a device that it would
        otherwise miss.

        :param Context context: the pyudev context
        """
        ...
    
    @classmethod
    def get_devices(cls, context, value): # -> frozenset[Any]:
        """
        Get any devices that may correspond to the given string.

        :param Context context: the pyudev context
        :param str value: the value to look for
        :returns: a list of devices obtained
        :rtype: set of :class:`Device`
        """
        ...
    


class DeviceNumberHypothesis(Hypothesis):
    """
    Represents the hypothesis that the device is a device number.

    The device may be separated into major/minor number or a composite number.
    """
    @classmethod
    def match(cls, value): # -> int | None:
        """
        Match the number under the assumption that it is a device number.

        :returns: the device number or None
        :rtype: int or NoneType
        """
        ...
    
    @classmethod
    def find_subsystems(cls, context): # -> list[str]:
        """
        Find subsystems in /sys/dev.

        :param Context context: the context
        :returns: a lis of available subsystems
        :rtype: list of str
        """
        ...
    
    @classmethod
    def lookup(cls, context, key): # -> frozenset[Device]:
        """
        Lookup by the device number.

        :param Context context: the context
        :param int key: the device number
        :returns: a list of matching devices
        :rtype: frozenset of :class:`Device`
        """
        ...
    


class DevicePathHypothesis(Hypothesis):
    """
    Discover the device assuming the identifier is a device path.
    """
    @classmethod
    def match(cls, value):
        """
        Match ``value`` under the assumption that it is a device path.

        :returns: the device path or None
        :rtype: str or NoneType
        """
        ...
    
    @classmethod
    def lookup(cls, context, key): # -> frozenset[Device] | frozenset[Any]:
        """
        Lookup by the path.

        :param Context context: the context
        :param str key: the device path
        :returns: a list of matching devices
        :rtype: frozenset of :class:`Device`
        """
        ...
    


class DeviceNameHypothesis(Hypothesis):
    """
    Discover the device assuming the input is a device name.

    Try every available subsystem.
    """
    @classmethod
    def find_subsystems(cls, context): # -> frozenset[str]:
        """
        Find all subsystems in sysfs.

        :param Context context: the context
        :rtype: frozenset
        :returns: subsystems in sysfs
        """
        ...
    
    @classmethod
    def match(cls, value):
        """
        Match ``value`` under the assumption that it is a device name.

        :returns: the device path or None
        :rtype: str or NoneType
        """
        ...
    
    @classmethod
    def lookup(cls, context, key): # -> frozenset[Device]:
        """
        Lookup by the path.

        :param Context context: the context
        :param str key: the device path
        :returns: a list of matching devices
        :rtype: frozenset of :class:`Device`
        """
        ...
    


class DeviceFileHypothesis(Hypothesis):
    """
    Discover the device assuming the value is some portion of a device file.

    The device file may be a link to a device node.
    """
    _LINK_DIRS = ...
    @classmethod
    def get_link_dirs(cls, context): # -> list[Any]:
        """
        Get all directories that may contain links to device nodes.

        This method checks the device links of every device, so it is very
        expensive.

        :param Context context: the context
        :returns: a sorted list of directories that contain device links
        :rtype: list
        """
        ...
    
    @classmethod
    def setup(cls, context): # -> None:
        """
        Set the link directories to be used when discovering by file.

        Uses `get_link_dirs`, so is as expensive as it is.

        :param Context context: the context
        """
        ...
    
    @classmethod
    def match(cls, value):
        ...
    
    @classmethod
    def lookup(cls, context, key): # -> frozenset[Device] | frozenset[Any]:
        """
        Lookup the device under the assumption that the key is part of
        the name of a device file.

        :param Context context: the context
        :param str key: a portion of the device file name

        It is assumed that either it is the whole name of the device file
        or it is the basename.

        A device file may be a device node or a device link.
        """
        ...
    


class Discovery:
    """
    Provides discovery methods for devices.
    """
    _HYPOTHESES = ...
    def __init__(self) -> None:
        ...
    
    def setup(self, context): # -> None:
        """
        Set up individual hypotheses.

        May be an expensive call.

        :param Context context: the context
        """
        ...
    
    def get_devices(self, context, value): # -> frozenset[Any]:
        """
        Get the devices corresponding to value.

        :param Context context: the context
        :param str value: some identifier of the device
        :returns: a list of corresponding devices
        :rtype: frozenset of :class:`Device`
        """
        ...
    


